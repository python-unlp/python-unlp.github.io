{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python \u00b6 En este portal encontrar\u00e1s contenido \u00fatil de la c\u00e1tedra para la cursada. Informaci\u00f3n \u00b6 C\u00e1tedras Discord Gitlab python@info.unlp.edu.ar","title":"Inicio"},{"location":"#python","text":"En este portal encontrar\u00e1s contenido \u00fatil de la c\u00e1tedra para la cursada.","title":"Python"},{"location":"#informacion","text":"C\u00e1tedras Discord Gitlab python@info.unlp.edu.ar","title":"Informaci\u00f3n"},{"location":"guias/01/commands/","text":"Comandos \u00b6 En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. Comandos de consola \u00b6 # Imprimir el directorio actual. pwd # Listar todos los archivos y directorios del directorio actual. ls # Igual que el anterior pero incluye los archivos y directorios ocultos. ls -a # Crear un nuevo directorio en el actual llamado \"dirname\". mkdir dirname # Crear un archivo en el directorio actual llamado \"filename\". touch filename # Moverse al directorio \"code/python\". cd code/python Comandos de git \u00b6 # Mostrar el estado de los archivos respecto al repositorio. git status # Agregar el archivo filename al versionado de git. git add <filename> # Agregar todos los archivos que sufieron una modificaci\u00f3n al versionado. git add . # Generar un commit con todos los archivos que fueron modificados y agregados a # git. Documenta el commit con el mensaje que escribamos. git commit -m <mensaje> # Generar una nueva rama localmente con el nombre <branch_name>. Y moverse a # esa rama. git checkout -b <branch_name> # Moverse a la rama <branch_name> local y si no existe la crea y se mueve. git checkout <branch_name> # Subir los cambios en commits locales a la rama <branch_name> ubicada en el # remote con nombre origin. git push origin <branch_name> # Descargar cambios en commits que est\u00e9n en la rama del remote origin para la # rama <branch_name>. git pull origin <branch_name> # Fusionar la rama <branch_name> dentro de la rama actual. git merge <branch_name>","title":"Comandos"},{"location":"guias/01/commands/#comandos","text":"En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows.","title":"Comandos"},{"location":"guias/01/commands/#comandos-de-consola","text":"# Imprimir el directorio actual. pwd # Listar todos los archivos y directorios del directorio actual. ls # Igual que el anterior pero incluye los archivos y directorios ocultos. ls -a # Crear un nuevo directorio en el actual llamado \"dirname\". mkdir dirname # Crear un archivo en el directorio actual llamado \"filename\". touch filename # Moverse al directorio \"code/python\". cd code/python","title":"Comandos de consola"},{"location":"guias/01/commands/#comandos-de-git","text":"# Mostrar el estado de los archivos respecto al repositorio. git status # Agregar el archivo filename al versionado de git. git add <filename> # Agregar todos los archivos que sufieron una modificaci\u00f3n al versionado. git add . # Generar un commit con todos los archivos que fueron modificados y agregados a # git. Documenta el commit con el mensaje que escribamos. git commit -m <mensaje> # Generar una nueva rama localmente con el nombre <branch_name>. Y moverse a # esa rama. git checkout -b <branch_name> # Moverse a la rama <branch_name> local y si no existe la crea y se mueve. git checkout <branch_name> # Subir los cambios en commits locales a la rama <branch_name> ubicada en el # remote con nombre origin. git push origin <branch_name> # Descargar cambios en commits que est\u00e9n en la rama del remote origin para la # rama <branch_name>. git pull origin <branch_name> # Fusionar la rama <branch_name> dentro de la rama actual. git merge <branch_name>","title":"Comandos de git"},{"location":"guias/02/instalar_python/","text":"Instalaci\u00f3n de Python \u00b6 Este este a\u00f1o en la materia utilizaremos la versi\u00f3n de Python 3.11.X . En esta gu\u00eda vamos a ver distintas formas de realizar la instalaci\u00f3n de la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. Instalaci\u00f3n con manejador de versiones \u00b6 La forma recomendable de instalar Python es por medio de un manejador de versiones. La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python que necesitemos. Permitir tener instaladas m\u00faltiples versiones. Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python . La herramienta que vamos a usar es pyenv Linux/MacOS \u00b6 Dependencias necesarias \u00b6 Para que pyenv puede realizar la instalaci\u00f3n de las distintas versiones de python de manera correcta es necesario contar algunas dependencias de su sistema operativo. Estas dependencias son librer\u00edas que su sistema operativo necesita para que pyenv pueda funcionar correctamente. Sin las mismas seguramente ocurran errores a la hora de instalar o querer utilizar la herramienta. Dependiendo del sistema operativo que utilicen deber\u00e1n segir las instrucciones en el siguiente enlace de la documentaci\u00f3n de pyenv - Suggested build environment . Instalaci\u00f3n con Git (RECOMENDADA) \u00b6 Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego reiniciar la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv . Instalaci\u00f3n con brew (solo MacOS) \u00b6 Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv Windows \u00b6 Para el caso de Windows existe una herramienta alternativa que nos permite tener pyenv para este tipo de sistema operativo. La herramienta es pyenv-win Instalaci\u00f3n con PowerShell \u00b6 Utilizar PowerShell para la instalaci\u00f3n en windows es la forma recomendada en la documentaci\u00f3n de la herramienta . Instalar pyenv-win en PowerShell. Invoke-WebRequest -UseBasicParsing -Uri \"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1\" -OutFile \"./install-pyenv-win.ps1\" ; & \"./install-pyenv-win.ps1\" Re abrir PowerShell Correr pyenv --version para verificar si la instalaci\u00f3n termin\u00f3 Corer pyenv install -l para verificar la lista de versiones de Python soportadas por pyenv-win Correr pyenv install <version> para instalar la versi\u00f3n de Python que desea Corer pyenv global <version> para setear esa versi\u00f3n de Python como global Verifique que versi\u00f3n de Python est\u00e1 utilizando en su path > pyenv version <version> (set by \\path\\to\\.pyenv\\pyenv-win\\.python-version) Verifique que esa versi\u00f3n de Python est\u00e1 funcionando > python -c \"import sys; print(sys.executable)\" \\path\\to\\.pyenv\\pyenv-win\\versions\\<version>\\python.exe Instalaci\u00f3n directa \u00b6 En este tipo de instalaci\u00f3n se instala directamente el ejecutable de Python en su sistema operativo. Este tipo de instalaci\u00f3n no es la recomendable dado que s\u00f3lo nos permite tener una sola versi\u00f3n de Python instalada sin problemas. En caso de instalar m\u00e1s de una versi\u00f3n puede aparecer distintos tipos de conflictos. Linux/MacOS \u00b6 Para estos sistemas operativos la instalaci\u00f3n directa no es recomendable dado que puede causar muchos conflictos con las versiones de instaladas en el sistema operativo por defecto. Warning Les recomendamos que utilicen un manejador de versiones para estos operativos. Windows \u00b6 Estos son los enlaces para los ejecutables de Windows: Instalador ejecutable para Windows 32bits Instalador ejecutable para Windows 64bits Instalador ejecutable para AMR64 Si necesita alguna alternativa distinta pueda obtener m\u00e1s opciones en el siguiente enlace . Al descargar el instalador debe ejecutarlo y seguir los pasos que ofrece. La primer ventana que se puede visualizar el la siguiente: Si es la primer versi\u00f3n de Python que instala se recomienda seguir la instalaci\u00f3n simple (\"Install Now\" en la imagen). Warning Tener en cuenta de seleccionar el checkbox de abajo para agregar el ejecutable de Python al PATH del sistema. Esto es fundamental para poder ejecutar Python correctamente. Si todo sali\u00f3 correctamente deber\u00eda ver una imagen similar a esta: Chequeo de variable de entorno \u00b6 Para verificar si tenemos Python correctamente instalado vamos a hacer uso de una terminal o consola de comandos. Para abrir el cmd tenemos al menos las siguientes dos opciones: En el buscador de windows ponemos \"cmd\" y seleccionamos la primer opci\u00f3n. Presionamos las teclas win + R , ponemos \"cmd\", presionamos enter . Para cualquiera de las opciones nos tiene que abrir la siguiente ventana: Para verificar si la instalaci\u00f3n de Python fu\u00e9 correcta vamos a ejecutar el int\u00e9rprete interactivo de Python. Lo podemos abrir escribiendo \"python\" en el cmd y prescionando la tecla enter . Deber\u00eda aparecer algo como esto: En esta terminal interactiva ya podemos ejecutar c\u00f3digo Python. Uso de pyenv \u00b6 Para buscar que versi\u00f3n de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8 Pueden encontrar la documentaci\u00f3n completa del uso en la documentaci\u00f3n oficial de la herramienta .","title":"Instalaci\u00f3n de Python"},{"location":"guias/02/instalar_python/#instalacion-de-python","text":"Este este a\u00f1o en la materia utilizaremos la versi\u00f3n de Python 3.11.X . En esta gu\u00eda vamos a ver distintas formas de realizar la instalaci\u00f3n de la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos.","title":"Instalaci\u00f3n de Python"},{"location":"guias/02/instalar_python/#instalacion-con-manejador-de-versiones","text":"La forma recomendable de instalar Python es por medio de un manejador de versiones. La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python que necesitemos. Permitir tener instaladas m\u00faltiples versiones. Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python . La herramienta que vamos a usar es pyenv","title":"Instalaci\u00f3n con manejador de versiones"},{"location":"guias/02/instalar_python/#linuxmacos","text":"","title":"Linux/MacOS"},{"location":"guias/02/instalar_python/#dependencias-necesarias","text":"Para que pyenv puede realizar la instalaci\u00f3n de las distintas versiones de python de manera correcta es necesario contar algunas dependencias de su sistema operativo. Estas dependencias son librer\u00edas que su sistema operativo necesita para que pyenv pueda funcionar correctamente. Sin las mismas seguramente ocurran errores a la hora de instalar o querer utilizar la herramienta. Dependiendo del sistema operativo que utilicen deber\u00e1n segir las instrucciones en el siguiente enlace de la documentaci\u00f3n de pyenv - Suggested build environment .","title":"Dependencias necesarias"},{"location":"guias/02/instalar_python/#instalacion-con-git-recomendada","text":"Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego reiniciar la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv .","title":"Instalaci\u00f3n con Git (RECOMENDADA)"},{"location":"guias/02/instalar_python/#instalacion-con-brew-solo-macos","text":"Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv","title":"Instalaci\u00f3n con brew (solo MacOS)"},{"location":"guias/02/instalar_python/#windows","text":"Para el caso de Windows existe una herramienta alternativa que nos permite tener pyenv para este tipo de sistema operativo. La herramienta es pyenv-win","title":"Windows"},{"location":"guias/02/instalar_python/#instalacion-con-powershell","text":"Utilizar PowerShell para la instalaci\u00f3n en windows es la forma recomendada en la documentaci\u00f3n de la herramienta . Instalar pyenv-win en PowerShell. Invoke-WebRequest -UseBasicParsing -Uri \"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1\" -OutFile \"./install-pyenv-win.ps1\" ; & \"./install-pyenv-win.ps1\" Re abrir PowerShell Correr pyenv --version para verificar si la instalaci\u00f3n termin\u00f3 Corer pyenv install -l para verificar la lista de versiones de Python soportadas por pyenv-win Correr pyenv install <version> para instalar la versi\u00f3n de Python que desea Corer pyenv global <version> para setear esa versi\u00f3n de Python como global Verifique que versi\u00f3n de Python est\u00e1 utilizando en su path > pyenv version <version> (set by \\path\\to\\.pyenv\\pyenv-win\\.python-version) Verifique que esa versi\u00f3n de Python est\u00e1 funcionando > python -c \"import sys; print(sys.executable)\" \\path\\to\\.pyenv\\pyenv-win\\versions\\<version>\\python.exe","title":"Instalaci\u00f3n con PowerShell"},{"location":"guias/02/instalar_python/#instalacion-directa","text":"En este tipo de instalaci\u00f3n se instala directamente el ejecutable de Python en su sistema operativo. Este tipo de instalaci\u00f3n no es la recomendable dado que s\u00f3lo nos permite tener una sola versi\u00f3n de Python instalada sin problemas. En caso de instalar m\u00e1s de una versi\u00f3n puede aparecer distintos tipos de conflictos.","title":"Instalaci\u00f3n directa"},{"location":"guias/02/instalar_python/#linuxmacos_1","text":"Para estos sistemas operativos la instalaci\u00f3n directa no es recomendable dado que puede causar muchos conflictos con las versiones de instaladas en el sistema operativo por defecto. Warning Les recomendamos que utilicen un manejador de versiones para estos operativos.","title":"Linux/MacOS"},{"location":"guias/02/instalar_python/#windows_1","text":"Estos son los enlaces para los ejecutables de Windows: Instalador ejecutable para Windows 32bits Instalador ejecutable para Windows 64bits Instalador ejecutable para AMR64 Si necesita alguna alternativa distinta pueda obtener m\u00e1s opciones en el siguiente enlace . Al descargar el instalador debe ejecutarlo y seguir los pasos que ofrece. La primer ventana que se puede visualizar el la siguiente: Si es la primer versi\u00f3n de Python que instala se recomienda seguir la instalaci\u00f3n simple (\"Install Now\" en la imagen). Warning Tener en cuenta de seleccionar el checkbox de abajo para agregar el ejecutable de Python al PATH del sistema. Esto es fundamental para poder ejecutar Python correctamente. Si todo sali\u00f3 correctamente deber\u00eda ver una imagen similar a esta:","title":"Windows"},{"location":"guias/02/instalar_python/#chequeo-de-variable-de-entorno","text":"Para verificar si tenemos Python correctamente instalado vamos a hacer uso de una terminal o consola de comandos. Para abrir el cmd tenemos al menos las siguientes dos opciones: En el buscador de windows ponemos \"cmd\" y seleccionamos la primer opci\u00f3n. Presionamos las teclas win + R , ponemos \"cmd\", presionamos enter . Para cualquiera de las opciones nos tiene que abrir la siguiente ventana: Para verificar si la instalaci\u00f3n de Python fu\u00e9 correcta vamos a ejecutar el int\u00e9rprete interactivo de Python. Lo podemos abrir escribiendo \"python\" en el cmd y prescionando la tecla enter . Deber\u00eda aparecer algo como esto: En esta terminal interactiva ya podemos ejecutar c\u00f3digo Python.","title":"Chequeo de variable de entorno"},{"location":"guias/02/instalar_python/#uso-de-pyenv","text":"Para buscar que versi\u00f3n de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8 Pueden encontrar la documentaci\u00f3n completa del uso en la documentaci\u00f3n oficial de la herramienta .","title":"Uso de pyenv"},{"location":"guias/03/git/","text":"Gu\u00eda de Git \u00b6 Git es una herramienta fundamental a la hora de escribir c\u00f3digo y a\u00fan m\u00e1s importante cuando lo hacemos de forma colaborativa. Esta gu\u00eda te mostrar\u00e1 distintas formas de instalar la herramienta en tu m\u00e1quina para comenzar a utilizarla. Instalaci\u00f3n \u00b6 En Debian-based \u00b6 sudo apt update sudo apt upgrade sudo apt install git En Red Hat-based \u00b6 sudo yum upgrade sudo yum install git En Arch-based \u00b6 sudo pacman -S git En MacOS \u00b6 brew install git En Windows \u00b6 Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale. Configurar informaci\u00f3n en Git \u00b6 En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Gu\u00eda de Git"},{"location":"guias/03/git/#guia-de-git","text":"Git es una herramienta fundamental a la hora de escribir c\u00f3digo y a\u00fan m\u00e1s importante cuando lo hacemos de forma colaborativa. Esta gu\u00eda te mostrar\u00e1 distintas formas de instalar la herramienta en tu m\u00e1quina para comenzar a utilizarla.","title":"Gu\u00eda de Git"},{"location":"guias/03/git/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"guias/03/git/#en-debian-based","text":"sudo apt update sudo apt upgrade sudo apt install git","title":"En Debian-based"},{"location":"guias/03/git/#en-red-hat-based","text":"sudo yum upgrade sudo yum install git","title":"En Red Hat-based"},{"location":"guias/03/git/#en-arch-based","text":"sudo pacman -S git","title":"En Arch-based"},{"location":"guias/03/git/#en-macos","text":"brew install git","title":"En MacOS"},{"location":"guias/03/git/#en-windows","text":"Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale.","title":"En Windows"},{"location":"guias/03/git/#configurar-informacion-en-git","text":"En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Configurar informaci\u00f3n en Git"},{"location":"guias/04/git_basico/","text":"Git b\u00e1sico \u00b6 Introducci\u00f3n \u00b6 Como ya vimos Git es una herramienta muy buena que nos permite manejar versiones de nuestro c\u00f3digo de manera distribuida con nuestro equipo de trabajo. Para poder realizar esto es necesario contar con un Servidor de Git aparte de tener la herramienta instalada en su m\u00e1quina. En esta oportunidad vamos a analizar un poco GitHub que es el Servidor de Git m\u00e1s popular actualmente. Crear una cuenta de Github \u00b6 Para crear una cuenta tienen que entrar a la web de Github y registrarse (Sing up). Crear repositorio en Git \u00b6 Ahora vamos a crear nuestro primer repositorio en Git , agregarle algunos archivos y publicarlos en el Servidor de git GitHub. Realiza la instalaci\u00f3n de la herramienta Git en tu m\u00e1quina. Tienes una gu\u00eda provista por la c\u00e1tedra en el siguiente enlace . Info Recorda tambi\u00e9n realizar la correcta configuraci\u00f3n de Git antes de usarlo poniendo tu nombre y tu mail que ser\u00e1n datos requeridos para cuando quiera hacer tu primer commit. Crear un repositorio local con Git en tu m\u00e1quina dentro de un directorio llamado ejemplo_python . mkdir ejemplo_python git init Mueve dentro de este directorio el programa run.py que escribiste en el punto 2 de la secci\u00f3n Python. cd ejemplo_python Ahora notar\u00e1s que hay cambios en tu repositorio Git local : git status Warning Recorda siempre elegir un mensaje adecuado para los commits cuando uses Git . Para agregar este archivo al versionado de Git debemos ejecutar: git add app.py Procede a crear el primer commit con ese archivo. git commit -m \"Mensaje de commit\" Agrega un README.md que servir\u00e1 de documentaci\u00f3n para el repositorio donde est\u00e9 el nombre y n\u00famero de alumno escrito. Modifica la aplicaci\u00f3n principal tambi\u00e9n. Nuevamente notar\u00e1s cambios en el repositorio local . Crea un segundo commit Hasta el momento todos las acciones realizadas fueron en tu m\u00e1quina. Ahora llega el turno de interactuar con el Servidor de Git (Github en este caso) que es el lugar en donde estar\u00e1 disponible el c\u00f3digo para compartirlo. Info Para esto es necesario que tengas una cuenta en Github as\u00ed que si no cuentas con una a\u00fan puedes crearla aqu\u00ed . Para usar GitHub de forma segura tienes dos opciones: Generar una clave SSH y agregarla al usuario (Este es lo recomandado. Seguir la gu\u00eda de SSH ). Usar el m\u00e9todo HTTP, pero deber\u00e1s escribir tu usuario y contrase\u00f1a para cada operaci\u00f3n con el servidor Github. Con tu cuenta creada debes crear tu repositorio remoto dentro de Github. Con tu nuevo repositorio creado resta realizar el enlace entre el repositorio local en el que viniste trabajando y el repositorio remoto que reci\u00e9n se cre\u00f3. Para eso tienes que actualizar tu remote dentro de tu repositorio local con la url del repositorio remoto (ver comandos sugeridos al crear el repositorio en Github). Si todo est\u00e1 correctamente configurado, s\u00f3lo resta hacer el \"push\" de los cambios.","title":"Git b\u00e1sico"},{"location":"guias/04/git_basico/#git-basico","text":"","title":"Git b\u00e1sico"},{"location":"guias/04/git_basico/#introduccion","text":"Como ya vimos Git es una herramienta muy buena que nos permite manejar versiones de nuestro c\u00f3digo de manera distribuida con nuestro equipo de trabajo. Para poder realizar esto es necesario contar con un Servidor de Git aparte de tener la herramienta instalada en su m\u00e1quina. En esta oportunidad vamos a analizar un poco GitHub que es el Servidor de Git m\u00e1s popular actualmente.","title":"Introducci\u00f3n"},{"location":"guias/04/git_basico/#crear-una-cuenta-de-github","text":"Para crear una cuenta tienen que entrar a la web de Github y registrarse (Sing up).","title":"Crear una cuenta de Github"},{"location":"guias/04/git_basico/#crear-repositorio-en-git","text":"Ahora vamos a crear nuestro primer repositorio en Git , agregarle algunos archivos y publicarlos en el Servidor de git GitHub. Realiza la instalaci\u00f3n de la herramienta Git en tu m\u00e1quina. Tienes una gu\u00eda provista por la c\u00e1tedra en el siguiente enlace . Info Recorda tambi\u00e9n realizar la correcta configuraci\u00f3n de Git antes de usarlo poniendo tu nombre y tu mail que ser\u00e1n datos requeridos para cuando quiera hacer tu primer commit. Crear un repositorio local con Git en tu m\u00e1quina dentro de un directorio llamado ejemplo_python . mkdir ejemplo_python git init Mueve dentro de este directorio el programa run.py que escribiste en el punto 2 de la secci\u00f3n Python. cd ejemplo_python Ahora notar\u00e1s que hay cambios en tu repositorio Git local : git status Warning Recorda siempre elegir un mensaje adecuado para los commits cuando uses Git . Para agregar este archivo al versionado de Git debemos ejecutar: git add app.py Procede a crear el primer commit con ese archivo. git commit -m \"Mensaje de commit\" Agrega un README.md que servir\u00e1 de documentaci\u00f3n para el repositorio donde est\u00e9 el nombre y n\u00famero de alumno escrito. Modifica la aplicaci\u00f3n principal tambi\u00e9n. Nuevamente notar\u00e1s cambios en el repositorio local . Crea un segundo commit Hasta el momento todos las acciones realizadas fueron en tu m\u00e1quina. Ahora llega el turno de interactuar con el Servidor de Git (Github en este caso) que es el lugar en donde estar\u00e1 disponible el c\u00f3digo para compartirlo. Info Para esto es necesario que tengas una cuenta en Github as\u00ed que si no cuentas con una a\u00fan puedes crearla aqu\u00ed . Para usar GitHub de forma segura tienes dos opciones: Generar una clave SSH y agregarla al usuario (Este es lo recomandado. Seguir la gu\u00eda de SSH ). Usar el m\u00e9todo HTTP, pero deber\u00e1s escribir tu usuario y contrase\u00f1a para cada operaci\u00f3n con el servidor Github. Con tu cuenta creada debes crear tu repositorio remoto dentro de Github. Con tu nuevo repositorio creado resta realizar el enlace entre el repositorio local en el que viniste trabajando y el repositorio remoto que reci\u00e9n se cre\u00f3. Para eso tienes que actualizar tu remote dentro de tu repositorio local con la url del repositorio remoto (ver comandos sugeridos al crear el repositorio en Github). Si todo est\u00e1 correctamente configurado, s\u00f3lo resta hacer el \"push\" de los cambios.","title":"Crear repositorio en Git"},{"location":"guias/05/ssh/","text":"SSH \u00b6 La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor. Requisitos \u00b6 Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash. Generaci\u00f3n de clave \u00b6 Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este passphrase no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando ```bash ssh-keygen -p -f /path/to/ssh_key ``` Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+ Tus claves fueron generadas en el directorio /your_home/.ssh : /your_home/.ssh/id_rsa.pub es tu clave p\u00fablica, y la que deber\u00e1s configurar en los servicios que quieras hacer uso con este mecanismo. /your_home/.ssh/id_rsa , es tu clave privada. Es importante que no pierdas nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu identidad. En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n. En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab","title":"SSH"},{"location":"guias/05/ssh/#ssh","text":"La idea de esta gu\u00eda es generar una clave ssh en la m\u00e1quina en donde vamos a trabajar durante la cursada para luego agregarla a el servidor Gitlab. Con este m\u00e9todo de seguridad vamos a evitar tener que completar usuario y clave cada vez que realicemos una operaci\u00f3n hacia el servidor.","title":"SSH"},{"location":"guias/05/ssh/#requisitos","text":"Para la generaci\u00f3n de clave necesitamos ejecutar el comando ssh-keygen . El mismo viene instalado en las distribuciones m\u00e1s comunes de linux. Para el caso de windows cuando instalen git van a obtener la consola Git Bash.","title":"Requisitos"},{"location":"guias/05/ssh/#generacion-de-clave","text":"Para generar la clave ssh deber\u00e1 ejecutar el siguiente comando: ssh-keygen -t rsa -b 2048 -C \"email@example.com\" Warning Recuerda poner tu email en lugar de usar \"email@example.com\". Se debe visualizar una respuesta similar a: Generating public/private rsa key pair. Enter file in which to save the key ( /home/user/.ssh/id_rsa ) : Presione la tecla Enter para guardar las llaves en el subdirectorio .ssh/ dentro del directorio de su usuario. Sino puede completar una ruta alternativa. Luego de guardar la clave le pedir\u00e1 que inserte in passphrase como una instancia m\u00e1s de seguridad. Enter passphrase ( empty for no passphrase ) : Enter same passphrase again: Este passphrase no es obligatorio as\u00ed que puede dejarlo en blanco pulsando nuevamente la tecla Enter. Info Si necesita cambiar esta passphrase en alg\u00fan momento puede ejecutar el siguiente comando ```bash ssh-keygen -p -f /path/to/ssh_key ``` Cuando el comando finaliza deber\u00eda mostrarle una salida similar a la siguiente: Your identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: a9:49:2e:2a:5e:33:3e:a9:de:4e:77:11:58:b6:90:26 mail@example.com The key ' s randomart image is: +-- [ RSA 2048 ] ----+ | ..o | | E o = . | | o. o | | .. | | ..S | | o o. | | = o.+. | | . = ++.. | | o = ++. | +-----------------+ Tus claves fueron generadas en el directorio /your_home/.ssh : /your_home/.ssh/id_rsa.pub es tu clave p\u00fablica, y la que deber\u00e1s configurar en los servicios que quieras hacer uso con este mecanismo. /your_home/.ssh/id_rsa , es tu clave privada. Es importante que no pierdas nunca este archivo ya que no vas a poder recuperarlo. Adem\u00e1s tampoco debes compartir el mismo ya que cualquier persona con dicha clave podr\u00eda tomar tu identidad. En nuesto caso, la clave p\u00fablica deber\u00e1 ser configurada en el servicio de Gitlab para autenticarnos de forma autom\u00e1tica a la hora de interactuar con el repositorio. Esto evita que tengamos que ingresar usuario y clave en cada operaci\u00f3n. En la siguiente gu\u00eda se explica como dar de alta nuestra clave ssh en Gitlab","title":"Generaci\u00f3n de clave"},{"location":"guias/06/ssh_gitlab/","text":"Agregar clave SSH a Gitlab \u00b6 Primero necesitamos crear nuestra clave SSH y copiarla en el clipboard. Esto se puede ver en esta gu\u00eda . Luego debe ir al Gitlab de la c\u00e1tedra https://gitlab.catedras.linti.unlp.edu.ar/ e iniciar sesi\u00f3n. Selecciona en tu avatar en la esquina superior derecha y hace click en C\u00f3nfiguraci\u00f3n . Selecciona Claves SSH . Pega la clave p\u00fablica que copiaste en el paso uno en el textarea. Asegurate de incluir un nombre descriptivo a tu clave en el input T\u00edtulo , como PC de casa . Opcionalmente se puede poner una fecha de expiraci\u00f3n a la clave. Selecciona el bot\u00f3n A\u00f1adir clave","title":"Agregar clave SSH a Gitlab"},{"location":"guias/06/ssh_gitlab/#agregar-clave-ssh-a-gitlab","text":"Primero necesitamos crear nuestra clave SSH y copiarla en el clipboard. Esto se puede ver en esta gu\u00eda . Luego debe ir al Gitlab de la c\u00e1tedra https://gitlab.catedras.linti.unlp.edu.ar/ e iniciar sesi\u00f3n. Selecciona en tu avatar en la esquina superior derecha y hace click en C\u00f3nfiguraci\u00f3n . Selecciona Claves SSH . Pega la clave p\u00fablica que copiaste en el paso uno en el textarea. Asegurate de incluir un nombre descriptivo a tu clave en el input T\u00edtulo , como PC de casa . Opcionalmente se puede poner una fecha de expiraci\u00f3n a la clave. Selecciona el bot\u00f3n A\u00f1adir clave","title":"Agregar clave SSH a Gitlab"},{"location":"guias/07/entornos_virtuales/","text":"Entornos virtuales \u00b6 Virtualenv es una herramienta usada para crear un ambiente aislado de Python . Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv . Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que queramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que queramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad. \u00bfC\u00f3mo crear un entorno virtual? \u00b6 Primero necesitamos tener disponible la librer\u00eda virtualenv . La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.10.2 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado. \u00bfComo usar mi entorno virtual? \u00b6 Para activar el entorno ejecutamos source venv/bin/activate # Linux venv \\S cripts \\a ctivate # Windows Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el Python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"Entornos virtuales"},{"location":"guias/07/entornos_virtuales/#entornos-virtuales","text":"Virtualenv es una herramienta usada para crear un ambiente aislado de Python . Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv . Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que queramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que queramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad.","title":"Entornos virtuales"},{"location":"guias/07/entornos_virtuales/#como-crear-un-entorno-virtual","text":"Primero necesitamos tener disponible la librer\u00eda virtualenv . La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.10.2 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado.","title":"\u00bfC\u00f3mo crear un entorno virtual?"},{"location":"guias/07/entornos_virtuales/#como-usar-mi-entorno-virtual","text":"Para activar el entorno ejecutamos source venv/bin/activate # Linux venv \\S cripts \\a ctivate # Windows Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el Python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"\u00bfComo usar mi entorno virtual?"},{"location":"guias/08/manejo_de_paquetes/","text":"Manejo de paquetes en Python \u00b6 El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que queramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo . Ejecutar python <archivo_anterior_descargardo>.py . Gu\u00eda completa aqu\u00ed . \u00bfC\u00f3mo usar pip ? \u00b6 Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultima versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que queramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que queramos usar es tener un archivo donde poner toda las librer\u00edas que queramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18.1 pandas == 1.0.1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"Manejo de paquetes en Python"},{"location":"guias/08/manejo_de_paquetes/#manejo-de-paquetes-en-python","text":"El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que queramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo . Ejecutar python <archivo_anterior_descargardo>.py . Gu\u00eda completa aqu\u00ed .","title":"Manejo de paquetes en Python"},{"location":"guias/08/manejo_de_paquetes/#como-usar-pip","text":"Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultima versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que queramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que queramos usar es tener un archivo donde poner toda las librer\u00edas que queramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18.1 pandas == 1.0.1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"\u00bfC\u00f3mo usar pip?"},{"location":"guias/09/guias_de_estilo/","text":"Gu\u00eda de estilos \u00b6 Las gu\u00edas de estilo ayudan a los equipos de desarrollo a escribir c\u00f3digo consistente simplificando su entendimiento a todos/as los/as miembros del equipo. Python define en PEP8 como gu\u00eda de estilos base y en PEP257 la convenci\u00f3n para Docstrings. Teniendo esta referencia vamos a mencionar las normas mas importantes que esperamos que traten de cumplir en el trabajo. Antes de comenzar a nombrarlas es necesario decir de una regla base a todas las siguientes a la hora de desarrollar una aplicaci\u00f3n en equipo: ser consistentes . \u00bfQu\u00e9 quiere decir esto? que todos los miembros sigan las mismas reglas para el estilo de escritura del c\u00f3digo . Generales: \u00b6 Uso de 4 espacios en lugar de tabs. Esto puede ser configurado en su editor 120 es el m\u00e1ximo de caracteres por l\u00ednea. Preferentemente 80 Dejar 2 l\u00edneas en blanco entre clases y funciones 1 l\u00ednea en blanco dentro de la clases entre los m\u00e9todos de la misma No dejar l\u00edneas en blanco luego de la l\u00ednea def No dejar espacios dentro de los par\u00e9ntesis, corchetes y las llaves # bien spam ( ham [ 1 ], { eggs : 2 }, []) # mal spam ( ham [ 1 ], { eggs : 2 }, ) Rodear los operadores con un espacio en blanco de ambos lados # bien x == 1 # mal x < 1 No usar espacios en blanco alrededor del = cuando se pasa un keyword argument o se define un valor por defecto en una funci\u00f3n # bien def function_name ( keyword_argument = value ): pass function_name ( keyword_argument = 1 ) # mal def function_name ( keyword_argument = value ): pass function_name ( keyword_argument = 1 ) Usar l\u00edneas en blanco para la separaci\u00f3n de l\u00f3gica dentro de las funciones/m\u00e9todos siempre que est\u00e9 justificado Mover los argumentos de una funci\u00f3n de una nueva l\u00ednea con indentaci\u00f3n si no entran todos en la primer l\u00ednea # bien def long_function_name ( var_one , var_two , var_three , var_four ): print ( var_one ) # bien def long_function_name ( var_one , var_two , var_three , var_four ): print ( var_one ) Mover las condiciones a nuevas l\u00edneas si no entran en el m\u00e1ximo determinado. Esto te ayudar\u00e1 a entender la condici\u00f3n mirando de arriba hacia abajo. # bien if ( this_is_one_thing and that_is_another_thing or that_is_third_thing or that_is_yet_another_thing and one_more_thing ): do_something () Usar Strings multil\u00edneas sin \\\\ . raise AttributeError ( 'Here is a multiline error message ' 'shortened for clarity.' ) Use argumentos nombrados para aumentar la legibilidad. # bien urlget ( '[http://google.com](http://google.com/)' , timeout = 20 ) # mal urlget ( '[http://google.com](http://google.com/)' , 20 ) Nunca termines tus l\u00edneas con punto y coma y no las uses para tener dos sentencias en la misma l\u00ednea. El encadenamiento de m\u00e9todos debe ser separado en m\u00faltiples l\u00edneas para mejor legibilidad ( df . write \\ . format ( 'jdbc' ) . option ( 'url' , 'jdbc:postgresql:dbserver' ) . option ( 'dbtable' , 'schema.tablename' ) . option ( 'user' , 'username' ) . option ( 'password' , 'password' ) . save () ) Siempre comience el bloque de c\u00f3digo en una nueva l\u00ednea # bien if flag : return None # mal if flag : return None Separa el s\u00edmbolo # del contenido del comentario con un espacio en blanco # good comment #bad comment Nombres \u00b6 Usar snake_case para m\u00f3dulos, variables, atributos, funciones y nombre de m\u00e9todos. NO USAR CamelCase . Usar CamelCase para el nombre de las clases. Los nombres deben referirse a lo que hace o contiene la variable, clase o funci\u00f3n. No incluya el tipo de la variable en su nombre. Ej: use personas en lugar de lista_personas . Docstrings \u00b6 Escriba los docstrings contenidos con triple comillas dobles \"\"\" Escriba los docstrings para m\u00e9todos que no sean tan simples. En los mismos resuma descripci\u00f3n de comportamiento, argumentos, valores de retorno, excepciones que se pueden lanzar def some_method ( name , state = None ): \"\"\"This function does something :param name: The name to use :type name: string :param state: Current state to be in (optional, default: None) :type state: bool :returns: int -- the return code :raises: AttributeError, KeyError \"\"\" ... return 0 Imports \u00b6 Evite los import relativos utilice import absolutos Nunca use * en los imports. Siempre sea expl\u00edcito sobre lo que va a importar Los imports deben escribirse en el siguiente orden separados por una l\u00ednea: M\u00f3dulos build-in (que vienen con Python) M\u00f3dulos third-party (paquetes externos que instal\u00f3) M\u00f3dulos del proyecto actual import os import logging import flask from flask import url_for from app.models.user import user Malas ideas \u00b6 Variables globales Usar lambdas donde no se requiere Usar funciones embebidas Fuentes \u00b6 PEPs PEP8 PEP257","title":"Gu\u00eda de estilos"},{"location":"guias/09/guias_de_estilo/#guia-de-estilos","text":"Las gu\u00edas de estilo ayudan a los equipos de desarrollo a escribir c\u00f3digo consistente simplificando su entendimiento a todos/as los/as miembros del equipo. Python define en PEP8 como gu\u00eda de estilos base y en PEP257 la convenci\u00f3n para Docstrings. Teniendo esta referencia vamos a mencionar las normas mas importantes que esperamos que traten de cumplir en el trabajo. Antes de comenzar a nombrarlas es necesario decir de una regla base a todas las siguientes a la hora de desarrollar una aplicaci\u00f3n en equipo: ser consistentes . \u00bfQu\u00e9 quiere decir esto? que todos los miembros sigan las mismas reglas para el estilo de escritura del c\u00f3digo .","title":"Gu\u00eda de estilos"},{"location":"guias/09/guias_de_estilo/#generales","text":"Uso de 4 espacios en lugar de tabs. Esto puede ser configurado en su editor 120 es el m\u00e1ximo de caracteres por l\u00ednea. Preferentemente 80 Dejar 2 l\u00edneas en blanco entre clases y funciones 1 l\u00ednea en blanco dentro de la clases entre los m\u00e9todos de la misma No dejar l\u00edneas en blanco luego de la l\u00ednea def No dejar espacios dentro de los par\u00e9ntesis, corchetes y las llaves # bien spam ( ham [ 1 ], { eggs : 2 }, []) # mal spam ( ham [ 1 ], { eggs : 2 }, ) Rodear los operadores con un espacio en blanco de ambos lados # bien x == 1 # mal x < 1 No usar espacios en blanco alrededor del = cuando se pasa un keyword argument o se define un valor por defecto en una funci\u00f3n # bien def function_name ( keyword_argument = value ): pass function_name ( keyword_argument = 1 ) # mal def function_name ( keyword_argument = value ): pass function_name ( keyword_argument = 1 ) Usar l\u00edneas en blanco para la separaci\u00f3n de l\u00f3gica dentro de las funciones/m\u00e9todos siempre que est\u00e9 justificado Mover los argumentos de una funci\u00f3n de una nueva l\u00ednea con indentaci\u00f3n si no entran todos en la primer l\u00ednea # bien def long_function_name ( var_one , var_two , var_three , var_four ): print ( var_one ) # bien def long_function_name ( var_one , var_two , var_three , var_four ): print ( var_one ) Mover las condiciones a nuevas l\u00edneas si no entran en el m\u00e1ximo determinado. Esto te ayudar\u00e1 a entender la condici\u00f3n mirando de arriba hacia abajo. # bien if ( this_is_one_thing and that_is_another_thing or that_is_third_thing or that_is_yet_another_thing and one_more_thing ): do_something () Usar Strings multil\u00edneas sin \\\\ . raise AttributeError ( 'Here is a multiline error message ' 'shortened for clarity.' ) Use argumentos nombrados para aumentar la legibilidad. # bien urlget ( '[http://google.com](http://google.com/)' , timeout = 20 ) # mal urlget ( '[http://google.com](http://google.com/)' , 20 ) Nunca termines tus l\u00edneas con punto y coma y no las uses para tener dos sentencias en la misma l\u00ednea. El encadenamiento de m\u00e9todos debe ser separado en m\u00faltiples l\u00edneas para mejor legibilidad ( df . write \\ . format ( 'jdbc' ) . option ( 'url' , 'jdbc:postgresql:dbserver' ) . option ( 'dbtable' , 'schema.tablename' ) . option ( 'user' , 'username' ) . option ( 'password' , 'password' ) . save () ) Siempre comience el bloque de c\u00f3digo en una nueva l\u00ednea # bien if flag : return None # mal if flag : return None Separa el s\u00edmbolo # del contenido del comentario con un espacio en blanco # good comment #bad comment","title":"Generales:"},{"location":"guias/09/guias_de_estilo/#nombres","text":"Usar snake_case para m\u00f3dulos, variables, atributos, funciones y nombre de m\u00e9todos. NO USAR CamelCase . Usar CamelCase para el nombre de las clases. Los nombres deben referirse a lo que hace o contiene la variable, clase o funci\u00f3n. No incluya el tipo de la variable en su nombre. Ej: use personas en lugar de lista_personas .","title":"Nombres"},{"location":"guias/09/guias_de_estilo/#docstrings","text":"Escriba los docstrings contenidos con triple comillas dobles \"\"\" Escriba los docstrings para m\u00e9todos que no sean tan simples. En los mismos resuma descripci\u00f3n de comportamiento, argumentos, valores de retorno, excepciones que se pueden lanzar def some_method ( name , state = None ): \"\"\"This function does something :param name: The name to use :type name: string :param state: Current state to be in (optional, default: None) :type state: bool :returns: int -- the return code :raises: AttributeError, KeyError \"\"\" ... return 0","title":"Docstrings"},{"location":"guias/09/guias_de_estilo/#imports","text":"Evite los import relativos utilice import absolutos Nunca use * en los imports. Siempre sea expl\u00edcito sobre lo que va a importar Los imports deben escribirse en el siguiente orden separados por una l\u00ednea: M\u00f3dulos build-in (que vienen con Python) M\u00f3dulos third-party (paquetes externos que instal\u00f3) M\u00f3dulos del proyecto actual import os import logging import flask from flask import url_for from app.models.user import user","title":"Imports"},{"location":"guias/09/guias_de_estilo/#malas-ideas","text":"Variables globales Usar lambdas donde no se requiere Usar funciones embebidas","title":"Malas ideas"},{"location":"guias/09/guias_de_estilo/#fuentes","text":"PEPs PEP8 PEP257","title":"Fuentes"},{"location":"guias/10/merge_request/","text":"Merge Request Gitlab \u00b6 En esta gu\u00eda vamos a mostrar como realizar un Merge Request dentro de Gitlab . El uso de Merge Request puede aportar mucho en el proceso de desarrollo por varios motivos entre los que se destacan: Ayuda a que todo el equipo se mantenga al tanto de los cambios. Sirve para realizar la t\u00e9cnica de Code Review . Permite abrir una discusi\u00f3n o debate sobre la implementaci\u00f3n de una nueva funcionalidad. Aqu\u00ed la documentaci\u00f3n oficial de Gitlab con mucho material sobre los Merge Request . En esta gu\u00eda veremos lo b\u00e1sico de la creaci\u00f3n de un MR y el proceso de aprobaci\u00f3n. Crear un nuevo MR \u00b6 Para crear un nuevo MR vamos al apartado Merge Request del men\u00fa de nuestro proyecto. Dentro de ese apartado clickear la opci\u00f3n \"Nueva solicitud de fusi\u00f3n\" . En la siguiente ventana vamos a poder seleccionar cual es la rama origen y cual la rama destino que queremos fusionar. Luego de elegir las ramas que queremos fusionar podemos ver algo as\u00ed: Es necesario confirmar para pasar a la siguiente secci\u00f3n donde vamos a tener un formulario para completar con informaci\u00f3n \u00fatil para el Merge Request . Podemos ponerle una descripci\u00f3n, asignarlo a un compa\u00f1ero para que lo revise, asociarlo a un milestone particular, agregarle etiquetas y configurar unas opciones propias del MR como borrar la rama origen cuando se realice y usar la estrategia squash para el merge de nuestros commits . Adem\u00e1s, se ve el resumen de los commits que se van a agregar a la rama destino y una pesta\u00f1a con los cambios que se van a realizar en los archivos. Para confirmar la creaci\u00f3n del MR se debe hacer submit con el bot\u00f3n \"Submit merge request\" . Confirmar MR \u00b6 Una vez confirmado pasamos a la vista del Merge Request creado donde se pueden visualizar los cambios, comentar, aprobar los cambios y finalmente realizar el merge . Algunas veces la rama que queremos funcionar puede tener conflictos. Estos conflictos Gitlab no los puede resolver, entonces no queda mas que avisar del problema, pedir que se resuelvan para poder realizar el merge . Para resolver estos conflictos tenemos que traernos a la rama origen los cambios de la rama destino, es decir, hacemos un merge en sentido contrario. Luego queda resolver los conflictos que ocurran para luego hacer un push en nuestra rama origen. Si todo sale bien, al volver a la ventana anterior ahora vamos a ver esto: Ahora podemos realizar el merge sin ning\u00fan problema.","title":"Merge Request Gitlab"},{"location":"guias/10/merge_request/#merge-request-gitlab","text":"En esta gu\u00eda vamos a mostrar como realizar un Merge Request dentro de Gitlab . El uso de Merge Request puede aportar mucho en el proceso de desarrollo por varios motivos entre los que se destacan: Ayuda a que todo el equipo se mantenga al tanto de los cambios. Sirve para realizar la t\u00e9cnica de Code Review . Permite abrir una discusi\u00f3n o debate sobre la implementaci\u00f3n de una nueva funcionalidad. Aqu\u00ed la documentaci\u00f3n oficial de Gitlab con mucho material sobre los Merge Request . En esta gu\u00eda veremos lo b\u00e1sico de la creaci\u00f3n de un MR y el proceso de aprobaci\u00f3n.","title":"Merge Request Gitlab"},{"location":"guias/10/merge_request/#crear-un-nuevo-mr","text":"Para crear un nuevo MR vamos al apartado Merge Request del men\u00fa de nuestro proyecto. Dentro de ese apartado clickear la opci\u00f3n \"Nueva solicitud de fusi\u00f3n\" . En la siguiente ventana vamos a poder seleccionar cual es la rama origen y cual la rama destino que queremos fusionar. Luego de elegir las ramas que queremos fusionar podemos ver algo as\u00ed: Es necesario confirmar para pasar a la siguiente secci\u00f3n donde vamos a tener un formulario para completar con informaci\u00f3n \u00fatil para el Merge Request . Podemos ponerle una descripci\u00f3n, asignarlo a un compa\u00f1ero para que lo revise, asociarlo a un milestone particular, agregarle etiquetas y configurar unas opciones propias del MR como borrar la rama origen cuando se realice y usar la estrategia squash para el merge de nuestros commits . Adem\u00e1s, se ve el resumen de los commits que se van a agregar a la rama destino y una pesta\u00f1a con los cambios que se van a realizar en los archivos. Para confirmar la creaci\u00f3n del MR se debe hacer submit con el bot\u00f3n \"Submit merge request\" .","title":"Crear un nuevo MR"},{"location":"guias/10/merge_request/#confirmar-mr","text":"Una vez confirmado pasamos a la vista del Merge Request creado donde se pueden visualizar los cambios, comentar, aprobar los cambios y finalmente realizar el merge . Algunas veces la rama que queremos funcionar puede tener conflictos. Estos conflictos Gitlab no los puede resolver, entonces no queda mas que avisar del problema, pedir que se resuelvan para poder realizar el merge . Para resolver estos conflictos tenemos que traernos a la rama origen los cambios de la rama destino, es decir, hacemos un merge en sentido contrario. Luego queda resolver los conflictos que ocurran para luego hacer un push en nuestra rama origen. Si todo sale bien, al volver a la ventana anterior ahora vamos a ver esto: Ahora podemos realizar el merge sin ning\u00fan problema.","title":"Confirmar MR"},{"location":"guias/11/jupyter_notebook/","text":"Jupyter notebook \u00b6 Introducci\u00f3n \u00b6 Jupyter Notebook es un entorno de trabajo interactivo que permite desarrollar c\u00f3digo en Python. Es utilizado ampliamente para an\u00e1lisis num\u00e9ricos, estad\u00edsticas y machine learning, entre otros campos de la inform\u00e1tica. Algunas de las principales funciones y beneficios que provee: Permite editar el c\u00f3digo desde el navegador, resaltando la sintaxis, indentaci\u00f3n y tambi\u00e9n provee funciones de autocompletado. Permite ejecutar c\u00f3digo desde el navegador, mostrando los resultados de esta ejecuci\u00f3n. Provee facilidades para la documentaci\u00f3n y visualizaci\u00f3n del c\u00f3digo. No solo permite escribir c\u00f3digo Python sino tambi\u00e9n permite visualizar otro tipo de extensiones como Markdown y HTML. Permite iniciar una sesi\u00f3n de una terminal de bash para ejecutar comandos desde el mismo navegador. Se puede agregar cualquier archivo .py o .ipynb simplemente arrastrandolos hasta la interfaz de la herramienta. Los archivos que genera son de extensi\u00f3n \"ipynb\", con lo que podemos compartirlos con nuestros compa\u00f1eros. Info Esta gu\u00eda est\u00e1 basada en la siguiente documentaci\u00f3n . Prerequisitos \u00b6 Esta gu\u00eda asume que las siguientes herramientas ya fueron instaladas correctamente en el sistema: Python 3.10.2 Pip3 Usar alguna de las \u00faltimas versiones Instalaci\u00f3n \u00b6 Para instalar Jupyter Notebook utilizando pip, se debe ejecutar el comando: pip3 install jupyter Iniciando el servidor \u00b6 Una vez instalado, para poder comenzar a utilizarlo es necesario iniciar el servidor de Jupyter Notebook. Este servidor se ejecutar\u00e1 en \"localhost\", es decir que nuestra computadora crear\u00e1 un servidor local ejecutando la herramienta. Para esto se debe ejecutar el siguiente comando: jupyter notebook Una vez iniciado el servidor, nuestra computadora abrir\u00e1 autom\u00e1ticamente el navegador web visualizando la interfaz gr\u00e1fica de la herramienta. En caso de que esto no suceda autom\u00e1ticamente, abrir un navegador web e ingresar la siguiente url: http://localhost:8888/ Por defecto el servidor se ejecuta utilizando el puerto 8888 de nuestra computadora. Para terminar la sesi\u00f3n del servidor basta simplemente con ir nuevamente a la terminal donde se ejecuto el comando anterior y presionar las teclas CTRL + C . La herramienta le pedir\u00e1 una confimaci\u00f3n y luego apagar\u00e1 el servidor. Importante: Guardar todos los cambios antes de apagar el servidor. De esta forma, al iniciarlo nuevamente, todos los archivos de la sesi\u00f3n anterior seguir\u00e1n estando disponibles. Primeros pasos \u00b6 Para comenzar a utilizar Jupyter Notebook, primero debemos crear un archivo de c\u00f3digo Python o \"notebook\". Para esto simplemente debemos hacer click en el bot\u00f3n \"New \ud83d\udd3d\" y seleccionar el int\u00e9rprete de Python. Una vez creado nuestro archivo notebook, solo basta con escribir c\u00f3digo Python en \u00e9l y darle click al bot\u00f3n \"Play\" para ejecutarlo y ver su resultado. La herramienta es muy flexible y permite no solo el uso de librer\u00edas externas, sino tambien referenciar a otros archivos dentro del proyecto. Info Algunos ejemplos pueden encontrarse en este repositorio de Github . En el caso de utilizar alguna librer\u00eda de Python, debemos primero instalarla en nuestro sistema. Por ejemplo en el caso de matplotlib pip3 install matplotlib Y luego podemos ejecutar c\u00f3digo utilizando dicha librer\u00eda en Jupyter Notebook.","title":"Jupyter notebook"},{"location":"guias/11/jupyter_notebook/#jupyter-notebook","text":"","title":"Jupyter notebook"},{"location":"guias/11/jupyter_notebook/#introduccion","text":"Jupyter Notebook es un entorno de trabajo interactivo que permite desarrollar c\u00f3digo en Python. Es utilizado ampliamente para an\u00e1lisis num\u00e9ricos, estad\u00edsticas y machine learning, entre otros campos de la inform\u00e1tica. Algunas de las principales funciones y beneficios que provee: Permite editar el c\u00f3digo desde el navegador, resaltando la sintaxis, indentaci\u00f3n y tambi\u00e9n provee funciones de autocompletado. Permite ejecutar c\u00f3digo desde el navegador, mostrando los resultados de esta ejecuci\u00f3n. Provee facilidades para la documentaci\u00f3n y visualizaci\u00f3n del c\u00f3digo. No solo permite escribir c\u00f3digo Python sino tambi\u00e9n permite visualizar otro tipo de extensiones como Markdown y HTML. Permite iniciar una sesi\u00f3n de una terminal de bash para ejecutar comandos desde el mismo navegador. Se puede agregar cualquier archivo .py o .ipynb simplemente arrastrandolos hasta la interfaz de la herramienta. Los archivos que genera son de extensi\u00f3n \"ipynb\", con lo que podemos compartirlos con nuestros compa\u00f1eros. Info Esta gu\u00eda est\u00e1 basada en la siguiente documentaci\u00f3n .","title":"Introducci\u00f3n"},{"location":"guias/11/jupyter_notebook/#prerequisitos","text":"Esta gu\u00eda asume que las siguientes herramientas ya fueron instaladas correctamente en el sistema: Python 3.10.2 Pip3 Usar alguna de las \u00faltimas versiones","title":"Prerequisitos"},{"location":"guias/11/jupyter_notebook/#instalacion","text":"Para instalar Jupyter Notebook utilizando pip, se debe ejecutar el comando: pip3 install jupyter","title":"Instalaci\u00f3n"},{"location":"guias/11/jupyter_notebook/#iniciando-el-servidor","text":"Una vez instalado, para poder comenzar a utilizarlo es necesario iniciar el servidor de Jupyter Notebook. Este servidor se ejecutar\u00e1 en \"localhost\", es decir que nuestra computadora crear\u00e1 un servidor local ejecutando la herramienta. Para esto se debe ejecutar el siguiente comando: jupyter notebook Una vez iniciado el servidor, nuestra computadora abrir\u00e1 autom\u00e1ticamente el navegador web visualizando la interfaz gr\u00e1fica de la herramienta. En caso de que esto no suceda autom\u00e1ticamente, abrir un navegador web e ingresar la siguiente url: http://localhost:8888/ Por defecto el servidor se ejecuta utilizando el puerto 8888 de nuestra computadora. Para terminar la sesi\u00f3n del servidor basta simplemente con ir nuevamente a la terminal donde se ejecuto el comando anterior y presionar las teclas CTRL + C . La herramienta le pedir\u00e1 una confimaci\u00f3n y luego apagar\u00e1 el servidor. Importante: Guardar todos los cambios antes de apagar el servidor. De esta forma, al iniciarlo nuevamente, todos los archivos de la sesi\u00f3n anterior seguir\u00e1n estando disponibles.","title":"Iniciando el servidor"},{"location":"guias/11/jupyter_notebook/#primeros-pasos","text":"Para comenzar a utilizar Jupyter Notebook, primero debemos crear un archivo de c\u00f3digo Python o \"notebook\". Para esto simplemente debemos hacer click en el bot\u00f3n \"New \ud83d\udd3d\" y seleccionar el int\u00e9rprete de Python. Una vez creado nuestro archivo notebook, solo basta con escribir c\u00f3digo Python en \u00e9l y darle click al bot\u00f3n \"Play\" para ejecutarlo y ver su resultado. La herramienta es muy flexible y permite no solo el uso de librer\u00edas externas, sino tambien referenciar a otros archivos dentro del proyecto. Info Algunos ejemplos pueden encontrarse en este repositorio de Github . En el caso de utilizar alguna librer\u00eda de Python, debemos primero instalarla en nuestro sistema. Por ejemplo en el caso de matplotlib pip3 install matplotlib Y luego podemos ejecutar c\u00f3digo utilizando dicha librer\u00eda en Jupyter Notebook.","title":"Primeros pasos"},{"location":"guias/12/buenas_practicas/","text":"Buenas pr\u00e1cticas en python \u00b6 Virtualenv \u00b6 virtualenv -p python venv source venv/bin/activate IPython \u00b6 pip install ipython ipython Zen \u00b6 import this # output The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Return multiple values \u00b6 def get_user ( id ): # fetch user from database name = \"Fede\" # Fake name birthdate = \"01-01-2000\" # Fake date return name , birthdate name , birthdate = get_user ( 4 ) print ( name , birthdate ) # output Fede 01 - 01 - 2000 One line if \u00b6 [ on_true ] if [ expression ] else [ on_false ] y = 2 result = \"Success!\" if ( y == 2 ) else \"Failed!\" print ( result ) # output \"Success!\" Truth value testing \u00b6 true = True false = False true_value = \"aaa\" # truthy false_value = [] # falsey none_value = None # Bad: if true == True : print ( \"truthy\" ) if false == False : print ( \"falsy\" ) # Good: if true : print ( \"truthy\" ) if true_value : print ( \"truthy\" ) if not false : print ( \"falsy\" ) if not false_value : print ( \"falsy\" ) if none_value is None : print ( None ) # output truthy falsy truthy truthy falsy falsy None NO Globals \u00b6 c = 0 def add (): global c c = c + 2 print ( \"Inside add():\" , c ) add () print ( \"In main:\" , c ) # output Inside add(): 2 In main: 2 Unpacking \u00b6 a = 1 b = 2 a , b = b , a print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 2 b: 1 a , b = ( 1 , 2 ) print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 1 b: 2 a , b = [ 1 , 2 ] print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 1 b: 2 a , * b = [ 1 , 2 , 3 ] print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 1 b: [2, 3] a , * b , c = [ 1 , 2 , 3 , 4 ] print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) print ( f \"c: { c } \" ) # output a: 1 b: [2, 3] c: 4 Merging dict \u00b6 dict1 = { \"a\" : 1 , \"b\" : 2 } dict2 = { \"b\" : 3 , \"c\" : 4 } merged = dict1 | dict2 print ( merged ) # output {'a': 1, 'b': 3, 'c': 4} Slicing a list \u00b6 a [ start : stop : step ] start , stop y step son opcionales. Si no los completas tendr\u00e1n los siguientes valores por defecto: 0 para start el final de la lista para end 1 para step # We can easily create a new list from # the first two elements of a list: first_two = [ 1 , 2 , 3 , 4 , 5 ][ 0 : 2 ] print ( first_two ) # output [1, 2] # And if we use a step value of 2, # we can skip over every second number # like this: steps = [ 1 , 2 , 3 , 4 , 5 ][ 0 : 5 : 2 ] print ( steps ) # output [1, 3, 5] # This works on strings too. In Python, # you can treat a string like a list of # letters: mystring = \"abcdefdn nimt\" [:: 2 ] print ( mystring ) # output aced it Enumerate \u00b6 # Bad numbers = [ 2 , 4 , 6 , 8 , 10 ] i = 0 for number in numbers : print ( f \"Item: # { number : 02 } at: { i } \" ) i += 1 # output Item: #02 at: 0 Item: #04 at: 1 Item: #06 at: 2 Item: #08 at: 3 Item: #10 at: 4 # Good numbers = [ 2 , 4 , 6 , 8 , 10 ] for i , number in enumerate ( numbers ): print ( f \"Item: # { number : 02 } at: { i } \" ) # output Item: #02 at: 0 Item: #04 at: 1 Item: #06 at: 2 Item: #08 at: 3 Item: #10 at: 4 Zip \u00b6 numbers = [ 1 , 2 , 3 ] words = [ 'one' , 'two' , 'three' ] numbers_and_words = zip ( numbers , words ) print ( list ( numbers_and_words )) # zip(numbers, words, strict=True) Probar! # output [(1, 'one'), (2, 'two'), (3, 'three')] Map \u00b6 Map se utiliza generalmente cuando quiero aplicarle alguna transformaci\u00f3n a cada elemento de la lista, pero no alterar la cantidad de elementos. map ( function , iterable ) def upper ( s ): return s . upper () words = list ( map ( upper , [ 'sentence' , 'fragment' ])) print ( words ) # output ['SENTENCE', 'FRAGMENT'] # With lambda words = list ( map ( lambda x : x . upper (), [ 'sentence' , 'fragment' ])) print ( words ) # output ['SENTENCE', 'FRAGMENT'] # Convert a string representation of # a number into a list of ints. list_of_ints = list ( map ( int , \"1234567\" )) print ( list_of_ints ) # output [1, 2, 3, 4, 5, 6, 7] Filter \u00b6 El filter se utiliza cuando quiero generalmente modificar la cantidad de elementos de un iterable, pero no transformar cada elemento. filter ( function , iterable ) numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] filtered = filter ( lambda x : x % 3 == 0 , numbers ) print ( list ( filtered )) # output [3, 6, 9] numbers = [ 1 , None , 2 , 3 , 4 , None , 5 , 6 , 7 , 8 , 9 ] filtered = filter ( bool , numbers ) print ( list ( filtered )) # output [1, 2, 3, 4, 5, 6, 7, 8, 9] Reduce \u00b6 Se puede utilizar en distintos casos: Quiero sumarizar valores de un iterable Quiero generar un iterable bastante distinto en forma partiendo de otro Se recomienda no utilizarlo cuando se podr\u00eda haber usado un filter o un map reduce ( function , iterable , init ) from functools import reduce numbers = ( 1 , 4 , 8 , 18 , 22 ) print ( \"a:\" , reduce ( lambda acc , number : acc + number , numbers )) print ( \"b:\" , reduce ( lambda acc , number : number , numbers )) print ( \"c:\" , reduce ( lambda acc , number : acc , numbers )) # using reduce with initializer = 3 print ( \"d:\" , reduce ( lambda acc , number : acc + number , numbers , 3 )) # output a: 53 b: 22 c: 1 d: 56 from functools import reduce list_of_invitees = [ { \"email\" : \"alex@example.com\" , \"name\" : \"Alex\" , \"status\" : \"attending\" }, { \"email\" : \"brian@example.com\" , \"name\" : \"Brian\" , \"status\" : \"declined\" }, { \"email\" : \"carol@example.com\" , \"name\" : \"Carol\" , \"status\" : \"pending\" }, { \"email\" : \"derek@example.com\" , \"name\" : \"Derek\" , \"status\" : \"attending\" }, { \"email\" : \"ellen@example.com\" , \"name\" : \"Ellen\" , \"status\" : \"attending\" } ] def invitee ( acc , invitee ): acc [ invitee [ \"name\" ]] = invitee [ \"status\" ] return acc result = reduce ( invitee , list_of_invitees , {}) print ( result ) # output {'Alex': 'attending', 'Brian': 'declined', 'Carol': 'pending', 'Derek': 'attending', 'Ellen': 'attending'} List comprehension \u00b6 Esta expresi\u00f3n nos permite hacer pr\u00e1cticamente lo mismo que un filter y un map al mismo tiempo. [ expression for item in list if condition ] numbers = [ i for i in range ( 10 )] print ( numbers ) # output [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] squares = [] for x in range ( 10 ): squares . append ( x ** 2 ) print ( \"a:\" , squares ) # -- squares = [ x ** 2 for x in range ( 10 )] print ( \"b:\" , squares ) # output a: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] b: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] def some_function ( a ): return ( a + 5 ) / 2 my_formula = [ some_function ( i ) for i in range ( 10 )] print ( my_formula ) # output [2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0] filtered = [ i for i in range ( 20 ) if i % 2 == 0 ] print ( filtered ) # output [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] Generators \u00b6 Todas las funciones que vimos anteriormente son eficientes. Lo son porque lo que terminan devolviendo internamente son generadores. Los generadores nos permiten devolver parcialmente elementos en una iteraci\u00f3n si tener que procesar toda la estructura. Iterar hasta numeros muy grandes \u00b6 r = range ( 0 , 100_000_000 ) % time l = list ( r ) def g_range ( start , end ): n = start while True : yield n n += 1 if n == end : break gr = g_range ( 0 , 100_000_000 ) Iterar infitinamente \u00b6 def all_even (): n = 0 while True : yield n n += 2 Pipeline de generadores \u00b6 def fibonacci_numbers ( nums ): x , y = 0 , 1 for _ in range ( nums ): x , y = y , x + y yield x def square ( nums ): for num in nums : yield num ** 2 print ( sum ( square ( fibonacci_numbers ( 10 )))) Data classes \u00b6 from dataclasses import dataclass @dataclass class Card : rank : str suit : str card = Card ( \"Q\" , \"hearts\" ) print ( \"Equals?\" , card == card ) print ( \"Rank:\" , card . rank ) print ( \"Card:\" , card ) # output Equals? True Rank: Q Card: Card(rank='Q', suit='hearts') Ejemplo para usar en el juego \u00b6 import PySimpleGUI as sg from dataclasses import dataclass , field @dataclass class Event (): name : str values : dict = field ( default_factory = dict ) sg . theme ( 'DarkAmber' ) # Keep things interesting for your users layout = [[ sg . Text ( 'Persistent window' )], [ sg . Input ( key = \"-AGE-\" )], [ sg . Input ( key = \"-TEXT-\" )], [ sg . Button ( 'Read' ), sg . Exit ()]] window = sg . Window ( 'Window that stays open' , layout ) while True : # The Event Loop event = Event ( * window . read ()) print ( event ) match event : case Event ( name = 'Read' , values = { \"-AGE-\" : str ( value )}) if int ( value ) < 18 : print ( \"ES MENOR de edad!\" ) case Event ( name = 'Read' , values = { \"-NAME-\" : str ( value )}): print ( f \"READ: { value } \" ) case Event ( name = 'Exit' ): print ( \"EXIT\" ) break window . close () Style guide \u00b6 pip install pycodestyle Auto-Formatting \u00b6 pip install black","title":"Buenas pr\u00e1cticas en python"},{"location":"guias/12/buenas_practicas/#buenas-practicas-en-python","text":"","title":"Buenas pr\u00e1cticas en python"},{"location":"guias/12/buenas_practicas/#virtualenv","text":"virtualenv -p python venv source venv/bin/activate","title":"Virtualenv"},{"location":"guias/12/buenas_practicas/#ipython","text":"pip install ipython ipython","title":"IPython"},{"location":"guias/12/buenas_practicas/#zen","text":"import this # output The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!","title":"Zen"},{"location":"guias/12/buenas_practicas/#return-multiple-values","text":"def get_user ( id ): # fetch user from database name = \"Fede\" # Fake name birthdate = \"01-01-2000\" # Fake date return name , birthdate name , birthdate = get_user ( 4 ) print ( name , birthdate ) # output Fede 01 - 01 - 2000","title":"Return multiple values"},{"location":"guias/12/buenas_practicas/#one-line-if","text":"[ on_true ] if [ expression ] else [ on_false ] y = 2 result = \"Success!\" if ( y == 2 ) else \"Failed!\" print ( result ) # output \"Success!\"","title":"One line if"},{"location":"guias/12/buenas_practicas/#truth-value-testing","text":"true = True false = False true_value = \"aaa\" # truthy false_value = [] # falsey none_value = None # Bad: if true == True : print ( \"truthy\" ) if false == False : print ( \"falsy\" ) # Good: if true : print ( \"truthy\" ) if true_value : print ( \"truthy\" ) if not false : print ( \"falsy\" ) if not false_value : print ( \"falsy\" ) if none_value is None : print ( None ) # output truthy falsy truthy truthy falsy falsy None","title":"Truth value testing"},{"location":"guias/12/buenas_practicas/#no-globals","text":"c = 0 def add (): global c c = c + 2 print ( \"Inside add():\" , c ) add () print ( \"In main:\" , c ) # output Inside add(): 2 In main: 2","title":"NO Globals"},{"location":"guias/12/buenas_practicas/#unpacking","text":"a = 1 b = 2 a , b = b , a print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 2 b: 1 a , b = ( 1 , 2 ) print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 1 b: 2 a , b = [ 1 , 2 ] print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 1 b: 2 a , * b = [ 1 , 2 , 3 ] print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) # output a: 1 b: [2, 3] a , * b , c = [ 1 , 2 , 3 , 4 ] print ( f \"a: { a } \" ) print ( f \"b: { b } \" ) print ( f \"c: { c } \" ) # output a: 1 b: [2, 3] c: 4","title":"Unpacking"},{"location":"guias/12/buenas_practicas/#merging-dict","text":"dict1 = { \"a\" : 1 , \"b\" : 2 } dict2 = { \"b\" : 3 , \"c\" : 4 } merged = dict1 | dict2 print ( merged ) # output {'a': 1, 'b': 3, 'c': 4}","title":"Merging dict"},{"location":"guias/12/buenas_practicas/#slicing-a-list","text":"a [ start : stop : step ] start , stop y step son opcionales. Si no los completas tendr\u00e1n los siguientes valores por defecto: 0 para start el final de la lista para end 1 para step # We can easily create a new list from # the first two elements of a list: first_two = [ 1 , 2 , 3 , 4 , 5 ][ 0 : 2 ] print ( first_two ) # output [1, 2] # And if we use a step value of 2, # we can skip over every second number # like this: steps = [ 1 , 2 , 3 , 4 , 5 ][ 0 : 5 : 2 ] print ( steps ) # output [1, 3, 5] # This works on strings too. In Python, # you can treat a string like a list of # letters: mystring = \"abcdefdn nimt\" [:: 2 ] print ( mystring ) # output aced it","title":"Slicing a list"},{"location":"guias/12/buenas_practicas/#enumerate","text":"# Bad numbers = [ 2 , 4 , 6 , 8 , 10 ] i = 0 for number in numbers : print ( f \"Item: # { number : 02 } at: { i } \" ) i += 1 # output Item: #02 at: 0 Item: #04 at: 1 Item: #06 at: 2 Item: #08 at: 3 Item: #10 at: 4 # Good numbers = [ 2 , 4 , 6 , 8 , 10 ] for i , number in enumerate ( numbers ): print ( f \"Item: # { number : 02 } at: { i } \" ) # output Item: #02 at: 0 Item: #04 at: 1 Item: #06 at: 2 Item: #08 at: 3 Item: #10 at: 4","title":"Enumerate"},{"location":"guias/12/buenas_practicas/#zip","text":"numbers = [ 1 , 2 , 3 ] words = [ 'one' , 'two' , 'three' ] numbers_and_words = zip ( numbers , words ) print ( list ( numbers_and_words )) # zip(numbers, words, strict=True) Probar! # output [(1, 'one'), (2, 'two'), (3, 'three')]","title":"Zip"},{"location":"guias/12/buenas_practicas/#map","text":"Map se utiliza generalmente cuando quiero aplicarle alguna transformaci\u00f3n a cada elemento de la lista, pero no alterar la cantidad de elementos. map ( function , iterable ) def upper ( s ): return s . upper () words = list ( map ( upper , [ 'sentence' , 'fragment' ])) print ( words ) # output ['SENTENCE', 'FRAGMENT'] # With lambda words = list ( map ( lambda x : x . upper (), [ 'sentence' , 'fragment' ])) print ( words ) # output ['SENTENCE', 'FRAGMENT'] # Convert a string representation of # a number into a list of ints. list_of_ints = list ( map ( int , \"1234567\" )) print ( list_of_ints ) # output [1, 2, 3, 4, 5, 6, 7]","title":"Map"},{"location":"guias/12/buenas_practicas/#filter","text":"El filter se utiliza cuando quiero generalmente modificar la cantidad de elementos de un iterable, pero no transformar cada elemento. filter ( function , iterable ) numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] filtered = filter ( lambda x : x % 3 == 0 , numbers ) print ( list ( filtered )) # output [3, 6, 9] numbers = [ 1 , None , 2 , 3 , 4 , None , 5 , 6 , 7 , 8 , 9 ] filtered = filter ( bool , numbers ) print ( list ( filtered )) # output [1, 2, 3, 4, 5, 6, 7, 8, 9]","title":"Filter"},{"location":"guias/12/buenas_practicas/#reduce","text":"Se puede utilizar en distintos casos: Quiero sumarizar valores de un iterable Quiero generar un iterable bastante distinto en forma partiendo de otro Se recomienda no utilizarlo cuando se podr\u00eda haber usado un filter o un map reduce ( function , iterable , init ) from functools import reduce numbers = ( 1 , 4 , 8 , 18 , 22 ) print ( \"a:\" , reduce ( lambda acc , number : acc + number , numbers )) print ( \"b:\" , reduce ( lambda acc , number : number , numbers )) print ( \"c:\" , reduce ( lambda acc , number : acc , numbers )) # using reduce with initializer = 3 print ( \"d:\" , reduce ( lambda acc , number : acc + number , numbers , 3 )) # output a: 53 b: 22 c: 1 d: 56 from functools import reduce list_of_invitees = [ { \"email\" : \"alex@example.com\" , \"name\" : \"Alex\" , \"status\" : \"attending\" }, { \"email\" : \"brian@example.com\" , \"name\" : \"Brian\" , \"status\" : \"declined\" }, { \"email\" : \"carol@example.com\" , \"name\" : \"Carol\" , \"status\" : \"pending\" }, { \"email\" : \"derek@example.com\" , \"name\" : \"Derek\" , \"status\" : \"attending\" }, { \"email\" : \"ellen@example.com\" , \"name\" : \"Ellen\" , \"status\" : \"attending\" } ] def invitee ( acc , invitee ): acc [ invitee [ \"name\" ]] = invitee [ \"status\" ] return acc result = reduce ( invitee , list_of_invitees , {}) print ( result ) # output {'Alex': 'attending', 'Brian': 'declined', 'Carol': 'pending', 'Derek': 'attending', 'Ellen': 'attending'}","title":"Reduce"},{"location":"guias/12/buenas_practicas/#list-comprehension","text":"Esta expresi\u00f3n nos permite hacer pr\u00e1cticamente lo mismo que un filter y un map al mismo tiempo. [ expression for item in list if condition ] numbers = [ i for i in range ( 10 )] print ( numbers ) # output [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] squares = [] for x in range ( 10 ): squares . append ( x ** 2 ) print ( \"a:\" , squares ) # -- squares = [ x ** 2 for x in range ( 10 )] print ( \"b:\" , squares ) # output a: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] b: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] def some_function ( a ): return ( a + 5 ) / 2 my_formula = [ some_function ( i ) for i in range ( 10 )] print ( my_formula ) # output [2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0] filtered = [ i for i in range ( 20 ) if i % 2 == 0 ] print ( filtered ) # output [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]","title":"List comprehension"},{"location":"guias/12/buenas_practicas/#generators","text":"Todas las funciones que vimos anteriormente son eficientes. Lo son porque lo que terminan devolviendo internamente son generadores. Los generadores nos permiten devolver parcialmente elementos en una iteraci\u00f3n si tener que procesar toda la estructura.","title":"Generators"},{"location":"guias/12/buenas_practicas/#iterar-hasta-numeros-muy-grandes","text":"r = range ( 0 , 100_000_000 ) % time l = list ( r ) def g_range ( start , end ): n = start while True : yield n n += 1 if n == end : break gr = g_range ( 0 , 100_000_000 )","title":"Iterar hasta numeros muy grandes"},{"location":"guias/12/buenas_practicas/#iterar-infitinamente","text":"def all_even (): n = 0 while True : yield n n += 2","title":"Iterar infitinamente"},{"location":"guias/12/buenas_practicas/#pipeline-de-generadores","text":"def fibonacci_numbers ( nums ): x , y = 0 , 1 for _ in range ( nums ): x , y = y , x + y yield x def square ( nums ): for num in nums : yield num ** 2 print ( sum ( square ( fibonacci_numbers ( 10 ))))","title":"Pipeline de generadores"},{"location":"guias/12/buenas_practicas/#data-classes","text":"from dataclasses import dataclass @dataclass class Card : rank : str suit : str card = Card ( \"Q\" , \"hearts\" ) print ( \"Equals?\" , card == card ) print ( \"Rank:\" , card . rank ) print ( \"Card:\" , card ) # output Equals? True Rank: Q Card: Card(rank='Q', suit='hearts')","title":"Data classes"},{"location":"guias/12/buenas_practicas/#ejemplo-para-usar-en-el-juego","text":"import PySimpleGUI as sg from dataclasses import dataclass , field @dataclass class Event (): name : str values : dict = field ( default_factory = dict ) sg . theme ( 'DarkAmber' ) # Keep things interesting for your users layout = [[ sg . Text ( 'Persistent window' )], [ sg . Input ( key = \"-AGE-\" )], [ sg . Input ( key = \"-TEXT-\" )], [ sg . Button ( 'Read' ), sg . Exit ()]] window = sg . Window ( 'Window that stays open' , layout ) while True : # The Event Loop event = Event ( * window . read ()) print ( event ) match event : case Event ( name = 'Read' , values = { \"-AGE-\" : str ( value )}) if int ( value ) < 18 : print ( \"ES MENOR de edad!\" ) case Event ( name = 'Read' , values = { \"-NAME-\" : str ( value )}): print ( f \"READ: { value } \" ) case Event ( name = 'Exit' ): print ( \"EXIT\" ) break window . close ()","title":"Ejemplo para usar en el juego"},{"location":"guias/12/buenas_practicas/#style-guide","text":"pip install pycodestyle","title":"Style guide"},{"location":"guias/12/buenas_practicas/#auto-formatting","text":"pip install black","title":"Auto-Formatting"}]}